(function(){
const JSONRPC = '2.0';
function w(m){process.stdout.write(JSON.stringify(m)+'\n');}
function init(){return {jsonrpc:JSONRPC,result:{protocolVersion:(process.env.MCP_SCHEMA_VERSION||'2025-06-18'),serverInfo:{name:'mcp-websearch-simple',version:'0.2.0',title:'Web Search (Simple)'},capabilities:{tools:{listChanged:false}},instructions:undefined}}}
function toolsList(){const hasSerp=!!process.env.SERPAPI_KEY;const hasGoogle=!!process.env.GOOGLE_API_KEY&&!!process.env.GOOGLE_CSE_ID;const engines=[hasGoogle?'google_cse':null,hasSerp?'serpapi':null].filter(Boolean);const desc=engines.length?`Web search using: ${engines.join(', ')}.`:'Web search (no API keys detected). Set GOOGLE_API_KEY+GOOGLE_CSE_ID or SERPAPI_KEY.';return {jsonrpc:JSONRPC,result:{tools:[{name:'search.query',description:desc,annotations:{openWorldHint:true,title:'Search the Web'},inputSchema:{type:'object',properties:{q:{type:'string',description:'Query string'},num:{type:'number',description:'Max results (default 5)'},site:{type:'string',description:'Optional site: filter'},engine:{type:'string',description:'serpapi|google_cse'},dateRestrict:{type:'string',description:'Google dateRestrict (d7,m1,y1)'}},required:['q'],additionalProperties:false}}]}}}
async function callTool(args){const {q,num,site,engine,dateRestrict}=args||{};const n=(num&&Number(num))||5;const hasSerp=!!process.env.SERPAPI_KEY;const hasGoogle=!!process.env.GOOGLE_API_KEY&&!!process.env.GOOGLE_CSE_ID;let eng=engine; if(!eng){eng=hasSerp?'serpapi':(hasGoogle?'google_cse':null);} if(!eng){return {content:[{type:'text',text:'No search engine configured. Provide SERPAPI_KEY or GOOGLE_API_KEY+GOOGLE_CSE_ID.'}],isError:true};}
try{
  let items=[]; if(eng==='serpapi'){const base='https://serpapi.com/search.json';const params=new URLSearchParams({engine:'google',q:q||'',api_key:process.env.SERPAPI_KEY,num:String(n)}); if(site){params.set('q',`${q} site:${site}`);} const url=`${base}?${params}`; const res=await fetch(url); const json=await res.json(); items=(json.organic_results||[]).map(r=>({title:r.title,link:r.link,snippet:r.snippet||''}));}
  else {const base='https://www.googleapis.com/customsearch/v1'; const params=new URLSearchParams({key:process.env.GOOGLE_API_KEY,cx:process.env.GOOGLE_CSE_ID,q:q||'',num:String(n)}); if(site){params.set('q',`${q} site:${site}`);} if(dateRestrict){params.set('dateRestrict',dateRestrict);} const url=`${base}?${params}`; const res=await fetch(url); const json=await res.json(); items=(json.items||[]).map(r=>({title:r.title,link:r.link,snippet:(r.snippet||'')}));}
  if(!items.length){return {content:[{type:'text',text:'No results.'}]};}
  const lines=items.slice(0,n).map((it,i)=>`${i+1}. ${it.title}\n   ${it.link}\n   ${it.snippet}`);
  return {content:[{type:'text',text:lines.join('\n\n')}]};
}catch(e){return {content:[{type:'text',text:`Search error: ${e?.message||e}` }],isError:true};}}
const rl=require('readline').createInterface({input:process.stdin});
rl.on('line',async line=>{let msg;try{msg=JSON.parse(line);}catch{return;} const {id,method,params}=msg||{}; if(!method)return; if(method==='initialize'){const r=init(); r.id=id; w(r); w({jsonrpc:JSONRPC,method:'notifications/initialized',params:null}); return;} if(method==='tools/list'){const r=toolsList(); r.id=id; w(r); return;} if(method==='tools/call'&&params&&params.name==='search.query'){const r=await callTool((params.arguments)||{}); w({jsonrpc:JSONRPC,id,result:r}); return;} if(id!==undefined){w({jsonrpc:JSONRPC,id,error:{code:-32601,message:`Method not implemented: ${method}`}});} });
})();